<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>
 
  <groupId>tao.book.sia</groupId>
  <artifactId>contacts</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>contacts</name>
  <description>contacts</description>
  
    <!-- 
  Maven构架有一个parent项目。
  我们让项目的Maven构建基于Spring Boot starter parent，这样的话，我们就能受益于Maven的依赖管理功能，
  对于项目中的很多依赖，就没有必要明确声明版本号了，因为版本号会从parent中继承得到。
   -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.1.4.RELEASE</version>
  </parent>
  
  <dependencies>
  	<!-- 使用Spring MVC来开发应用的Web层，将SpringMVC作为依赖添加到构建中。 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- 按照传统的方式，Java Web应用会使用JSP作为视图层的技术。但Thymeleaf
	的原生模板比JSP更加便于使用，而且它能够让我们以HTML的形式编写模板。
	只要我们将Thymeleaf添加到项目的类路径下，就启
	用了Spring Boot的自动配置。当应用运行时，Spring Boot将会探测到
	类路径中的Thymeleaf，然后会自动配置视图解析器、模板解析器以
	及模板引擎，这些都是在Spring MVC中使用Thymeleaf所需要的。因
	此，在我们的应用中，不需要使用显式Spring配置的方式来定义Thymeleaf。
	 -->
    <dependency>
      <groupId>org.thymeleaf</groupId>
      <artifactId>thymeleaf-spring4</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>
  </dependencies> 
  
  <build>
    <plugins>
      <!-- 构建jar文件 -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  
</project>